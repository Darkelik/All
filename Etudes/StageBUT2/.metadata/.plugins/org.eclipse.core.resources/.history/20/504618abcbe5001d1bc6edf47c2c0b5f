package io.troof.bigpi.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;

import io.troof.bigpi.model.Email;

@RestController
public class EmailController {
	private List<Email> emails = createList();
	
	private List<Email> createList(){
		List<Email> tempEmails = new ArrayList<Email>();
		Email email1 = new Email();
		email1.setEmail("Jason");
		Email email2 = new Email();
		email2.setEmail("Emile");
		tempEmails.add(email1);
		tempEmails.add(email2);
		return tempEmails;
	}
	
	@RequestMapping(value = "/users", method = RequestMethod.GET, produces = "application/json")
	public ResponseEntity<?> getUsers(@RequestParam(required = false) String email) {
	    if (email != null) {
	    	//dire bonjour à un user qui correspond à l'id
	        Optional<Email> emailTemp = emails.stream().filter(e -> e.getEmail().equals(email)).findFirst();
	        if (emailTemp.isPresent()) {
	            String finalEmail = emailTemp.get().getEmail();
	            String message = "Troof : say hello " + finalEmail;
	            return ResponseEntity.ok(message);
	        } else {
	            return ResponseEntity.notFound().build();
	        }
	    } else {
	    	//retourner la liste des users
	        return ResponseEntity.ok(emails);
	    }
	}
	
	
	@DeleteMapping(path = {"/{id}"})
	public User delete(@PathVariable("id") String id) {
		User deletedUser = null;
		for (User user : users) {
			if (user.getId().equals(id)) {
				users.remove(user);
				deletedUser = user;
				break;
			}
		}
		return deletedUser;
	}
	
	@PostMapping
	public Email create(@RequestBody Email email) {
	    emails.add(email);
	    System.out.println(email);
	    return email;
	}
	
}
